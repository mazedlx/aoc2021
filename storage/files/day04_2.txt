<?php
$input = '31,
...
55 63 50  7 62';

$numbers = explode(',', explode(PHP_EOL, $input)[0]);

$boards = collect(explode(PHP_EOL, $input))
    ->filter(fn ($line, $i) => $i > 1)
    ->filter(fn($line) => $line !== '')
    ->values()
    ->map(fn ($line) => preg_split('/\s+/', trim($line)))
    ->chunk(5)
    ->map(fn($board) => $board->values())
    ->toArray();

function checkBoard($board) {
    foreach ($board as $row => $cols) {
        $checkRows = array_reduce($cols, function ($carry, $col) {
            return strstr($col, '*') ? (1 + $carry) : $carry;
        }, 0);
        if ($checkRows === 5) {
            return true;
        }
    }

    for($col = 0; $col <= 4; $col++) {
        $checkCols = 0;
        for ($row = 0; $row <= 4; $row++) {
            if (strstr($board[$row][$col], '*')) {
                $checkCols += 1;
            }
            if ($checkCols === 5) {
                return true;
            }
        }
    }
    return false;

}

function markBoard($board, $number) {
    return collect($board)->map(function ($row) use ($number) {
        return collect($row)->map(function ($digit) use ($number) {
            return $digit == $number ? $digit . '*' : $digit;
        });
    })->values()
    ->toArray();

}

function finalScore($board, $number) {
    return collect($board)->map(function ($row) {
        return collect($row)->reduce(function ($carry, $item) {
            return !strstr($item, '*') ? ($item + $carry) : $carry;
        });
    })->reduce(function ($carry, $item) {
        return $carry + $item;
    }, 0) * $number;
}


$j = 0;
$winners = [];

while(count($winners) < count($boards)) {
    foreach ($boards as $i => $board) {
        $boards[$i] = markBoard($board, $numbers[$j]);
        if (checkBoard($boards[$i]) && ! in_array($i, $winners)) {
            $winners[] = $i;
        }

    }
    $j++;

}


finalScore($boards[array_pop($winners)], $numbers[$j-1]);
